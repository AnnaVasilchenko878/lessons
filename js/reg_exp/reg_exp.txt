Регулярные выражения - это шаблоны класса RegExp для поискка, манипуляций, сопоставления подстрок.

Где используют?

- валицация форм
- обработка текстовых данных 
- поиск и фильтрация текстовых данных

Как это работает?
Класс RegExp позволяет создать объект с методами которые работают с регулярными выражениями, далее в объект передается шаблон затем в метод передается строка.

let переменная = /выражение/;
переменная.название_метода(строка);

Преимущества

+ Гибкость, сопоставление по широкому критерию (регистр, все совпадения, сложные комбинации)
+ Многократное использование
+ Высокая производительность


Недостатки

- плохая читабельность кода
- ограниченое количество методов
- небольшая сложность в основении

Терминология:

1. Шаблон регулярного выражения - это комбинация символьных классов через которую осуществляется манипуляции над строками

2. Символьный класс - наименьшая единица от конструкции для манипуляции над строками

3. Наборы символьных классов - комбинации символьных единиц.

Особенности:
- некоторые символы нужно экранировать, иначе они могут восприниматься как флаг
- символьные наборы записываются без пробелов
- символьный класс \w выполняется над латинскими буквами
- следует внимательно писать шаблоны где похожие буквы на разных языках

Создать регулярное выражение
1. Как экземпляр класса
  let varName = new RegExp('шаблон', 'флаги');
2. Без экземпляра
  let varName = /шаблон/флаги

Получить данные о подстроке в массиве

строка.match(регулярное выражение)

Символьные классы - классы которые определяют набор символов
\d - символ цифры от 0 до 9

Найти число в строке от 0-9
let reg = /\d/;

Найти любой первый символ кроме числа
let reg =/D/;

Найти первый пробел, табуляция, конец файла, перенос строки
let reg = /\s/

Найти непробельный символ
let reg = \/S\;

Найти нижнее подчеркивание или любую цифру 0-9, или латинский символ
let reg = \/w\;

Найти не символ, не цифру, не нижнее подчеркивание
let reg = /\w/;

Найти первый символ из набора символьных классов 
let reg = /[перечисление символов без пробела]/

Найти первую подстроку из набора
let reg = /[символы варианты начала подстроки без пробела]конец строки/

Найти подстроку с некоторыми исключениями
let reg = /[^символы исключения]/

Найти символьный диапазон
let reg = /[начало символа - конец символа]/

Найти символ который не входит в диапазон набора
let reg = /[^символ начала - символ конца дипазона]/