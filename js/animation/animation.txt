Структура анимации 

1. easeIn - прямое использование анимации
2. easeOut - обратное использование анимации
3. easeInOut - двойной эффект в начале и в конце анимации

duration - длительность анимации в миллисекундах

timing - расчет прогресса времени, скорость и диманика анимации в основном бывают:
    Прямые easeIn
        - линейные 
            return timeFraction
        - параболическая кривая, ускорение на степень   (степень n)  
            return Math.pow(timefraction, 2)
        - дуга
            return 1 - Math.sin(Math.acos(timeFraction));
        - выстрел из лука, x сила натяжения тетивы
            return Math.pow(timeFraction, 2) * ((x + 1) * timeFraction - x)
        - отскок
            for(let a=0, b=1; 1; a+=b, b/=2) {
                if(timeFraction>=(7-4*a)/11) {
                return -Math.pow((11-6*a-11*timeFraction)/4,2) + Math.pow(b,2)
                }
            }
        - пружина
            function timing(x) {
                return function (timeFraction) {
                    return Math.pow(2, 10* (timeFraction -1)) * Math.cos(20*Math.PI * x/3 * timeFraction);
                }
            }
    
    Обратные easeOut - общий шаблон на основе анимацианного прогресса
        function makeEaseOut(timing) {
            return function (timeFraction) {
                return 1 - timing(timeFraction)
            }
        }
        let easeOutAnimation = makeEaseOut(timing);

    Обратная двойная анимация easeInOut - шаблон на основе анимационного прогресса
        function makeEaseInOut(timing) {
            return function(timeFraction) {
                if(timeFraction<0.5) {
                    return timing(2*timeFraction)/2
                } else {
                    return (2-timing(2*(1-timeFraction)))/2
                }
            }
        }
        let easeInOutAnimation = makeEaseInOut(timing); 


    



draw - отрисовка 
