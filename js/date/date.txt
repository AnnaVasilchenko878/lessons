Date - это встроенный класс который создает экземпляр времени, число в милисекундах с 1 января 1970г UTC.

Терминология
1. UTC - мировое координированное время, которое является стандартом основываясь на атомных часах.
2. GMT+0300 - часовой пояс в зависимости от Гринвичского меридиана, смещение.
3. Эпоха Unix - определенный момент времени который используется в UnixOC 1.01.1970UTC00:00:00 (не во всех)
4. временная метка - timestamp - количество миллисекунд с эпохи Unix

Меры величин 
1 сек - 1 000 миллисекунд

Общий синтаксис 
 - new Date()
 - new Date(значение)
 - new Date(YYYY-MM-DD hh:mm:ss)

Ньюансы:
  - без оператора new будет строка
  - не имеют литерального синтаксиса (например кавычки при создании строк)
  - передача аргумента в виде строки должна соответсвовать стандарту ISO8601 (YYYY-MM-DD) или (YYYY-MM-DDTHH:mm:ss)
  - не рекомендуется указывать дату латиницей (December), могут быть проблемы с браузером
  - если указать в аргументе количество дней/месяцев/часов больше чем возможно то они плюсутся на след значение (например 2012-13-05 будет 2013-01-05)
  - Год можно указать в виде значения от 0-99 он будет прибавлятся к 1900
  - Месяц от 0-11
  - Не рекомендуется менять или добавлять свойства и методы прототипа 
  - Свойство length класса Date показывает количество параметров которые принимает функция-конструктор
  - если в функцию конструктор вызывается не со всеми аргументами то отсутствующим присваивается минимальные значения 1(день) или 0
  - все параметры отличные от положенных возвращают invalid Date, некоторые парметры приравниаются к примитиву с сравниваются со строкой или числом (null)
  - массивы приравненные к примитиву могут непредсказуемо отображаться в разных браузерах
  - некоторые методы работают без создания экземпляра например (Date.now(), Date.UTC())
  - параметр миллисекунда добавлется от 0-999 т.е 5 - 005
  - методы Date.now() и getTime() округляют значение благодаря настройкам безопастности браузеров (защита от тайминговых аттак)
  - метод Date.parse() ведет себя непредсказуемо в зависимости от браузера
  - метод setDate возвращает количество в млллисекунд с эпохи unix
  --------- Получение---------------

Получить строку с текущей датой
имя_переменной = Date();

Получить объект с текущей датой 
имя_переменной = new Date();

Получить объект с количеством в млллисекундах от 1.01.1970
имя_переменной = new Date(значение)

Получить определенную дату по ISO8601
имя_переменной = new Date('YYYY-MM-DD')

Получить определенную дату с часами по ISO0601
имя_переменной = new Date('YYYY-MM-DDTHH:mm:ss)

Получить значение в миллисекундах прошедших с 1.01.70 по UTC
Date.now()

Получить значение в миллисекундах прошедших с 1.01.70 в UTC
Date.UTC()

Получить значение в миллисекундах прошедших с 1.01.70 до определенной даты
экземпляр_класса.valueOf()

Получить день из даты в локальном времени
экземпляр_класса.getDate()

Получить год из даты в соответствии с локальным временем
экземпляр_класса.getFullYear()

Получить час из даты в соответствии с локальным временем
экземпляр_класса.getHours()

Получить миллисекунду из даты в соответствии с локальным временем
экземпляр_класса.getMilliseconds()

Получить минуту из даты в соответствии с локальным временем
экземпляр_класса.getMinutes()

Получить числовое значение месяца из даты в соответствии с локальным временем
экземпляр_класса.getMonth()

Получить числовое значение секунды из даты в соответствии с локальным временем
экземпляр_класса.getSeconds()

Получить числовое значение дня недели(0-воскресенье 6-суббота)
экземпяр_класса.getDay();

Получить временную метку до указанной даты
экземпляр_класса.getTime()

Перевести дату в виде строки в число миллисекунд прошедших с 1.01.70
Date.parse('дата')
 
Перевести дату из локального формата в число миллисекунд прошедших с 1.01.70 по UTC (минимум 2 аргумента)
Date.UTC(год, месяц)

Перевести дату в строку с локальным форматом
экземпляр_класса.toLocaleDateString()

Перевести в дату в строку в UTC
экземпляр_класса.toUTCString()


Перевести в дату в строку
экземпляр_класса.toString()

Перевести время в строку в локальном формате
экземпляр_класса.toTimeString()

Сменить тип возвращаемого значения
имя_экземпляра[Symbol.toPrimitive]('string'/'number')

Cменить тип возвращаемого знаение на строку
экземпляр_класса.toString()

Сменить тип возвращаемого значения на строку в ISO8601
экземпляр_класса.toISOString()

Сменить тип возвращаемого значения на строку в JSON
экземпляр_класса.toJSON()

Сменить числовое значение дня в добавлется
имя_экземпляра.setDate(число месяца);

Сменить числовые значение года, месяца или дня
экземпляр_класса.setFullYear(год, месяц, день)

Сменить числовые значение часа, минуты или секунды и миллисекунды
экземпляр_класса.setHours(час, минута, секунда, миллисекунда)


------------Свойства------------------

Добавить свойство в прототип
Date.prototype.имя_свойства = значение

